#!/bin/bash

# --- SysPilot Setup Script ---
# This script automates the installation of the Python environment,
# the configuration of sudoers for specific commands,
# and the creation of a Systemd service for the SysPilot application.

# Requirements:
# - Python 3 installed
# - Sudo access
# - Should be run from a graphical terminal session of the user who will control multimedia.

set -e # Exit immediately if a command fails

echo "--- Starting SysPilot setup ---"

# --- 1. Define paths and variables ---
# Ensure this script is run from the project root directory.
PROJECT_DIR="$(pwd)"
VENV_DIR="$PROJECT_DIR/venv"
BACKEND_DIR="$PROJECT_DIR/backend"
REQUIREMENTS_FILE="$BACKEND_DIR/requirements.txt"
SUDOERS_D_PATH="/etc/sudoers.d"
SUDOERS_D_FILE_NAME="syspilot-commands"
SUDOERS_D_TARGET_PATH="$SUDOERS_D_PATH/$SUDOERS_D_FILE_NAME"
SYSTEMD_SERVICE_NAME="syspilot.service"
SYSTEMD_SERVICE_FILE="/etc/systemd/system/$SYSTEMD_SERVICE_NAME"
GUNICORN_BIN="$VENV_DIR/bin/gunicorn"
ENV_CONF_FILE="$BACKEND_DIR/syspilot_env.conf" # File to record captured environment variables

# --- 2. Ask the user for the username for the Systemd service ---
echo ""
read -p "Please enter the Linux username that will run the SysPilot service (e.g., www-data, or your desktop username for multimedia control): " SYSTEM_USER
if [ -z "$SYSTEM_USER" ]; then
    echo "Error: Username cannot be empty! Exiting."
    exit 1
fi
echo "The SysPilot service will be configured to run as user: $SYSTEM_USER"

# --- 3. Capture graphical session environment variables ---
echo ""
echo "--- Capturing graphical session environment variables ---"
echo "This is CRITICAL for multimedia and graphical commands (like play/pause, volume control)."
echo "You MUST run this script from the graphical terminal session of the user whose audio/display you want to control."

# Get the current graphical user's session environment variables
# Filter for relevant variables needed for X11, D-Bus, and user session context
CAPTURED_DISPLAY="$DISPLAY"
CAPTURED_DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS"
CAPTURED_XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR"
CAPTURED_XAUTHORITY="$XAUTHORITY" # Needed for X11 authorization
CAPTURED_HOME="$HOME" # Essential for user configs
CAPTURED_USER="$USER" # The user currently running the script
CAPTURED_LOGNAME="$LOGNAME" # Another form of user name
CAPTURED_PATH="$PATH" # Capture full PATH

# Additional XDG session variables critical for logind/screensaver
CAPTURED_XDG_SESSION_ID="$XDG_SESSION_ID"
CAPTURED_XDG_SESSION_TYPE="$XDG_SESSION_TYPE"
CAPTURED_XDG_SESSION_CLASS="$XDG_SESSION_CLASS"
CAPTURED_XDG_SEAT="$XDG_SEAT"
CAPTURED_XDG_VTNR="$XDG_VTNR"
CAPTURED_XDG_CURRENT_DESKTOP="$XDG_CURRENT_DESKTOP"
CAPTURED_XDG_SESSION_PATH="$XDG_SESSION_PATH" # NEW: Crucial for logind session context


# Check if essential variables are empty
if [ -z "$CAPTURED_DISPLAY" ] || [ -z "$CAPTURED_DBUS_SESSION_BUS_ADDRESS" ] || [ -z "$CAPTURED_XDG_RUNTIME_DIR" ] || [ -z "$CAPTURED_XDG_SESSION_ID" ] || [ -z "$CAPTURED_XDG_SESSION_PATH" ]; then
    echo "WARNING: One or more critical graphical environment variables (DISPLAY, DBUS_SESSION_BUS_ADDRESS, XDG_RUNTIME_DIR, XDG_SESSION_ID, XDG_SESSION_PATH) are empty."
    echo "Graphical/multimedia commands will LIKELY NOT work. Ensure you are in a graphical session and D-Bus is running."
fi

# Write these to a config file (for record-keeping, not directly sourced by Systemd anymore)
echo "# SysPilot Environment Variables (Auto-generated by setup.sh)" > "$ENV_CONF_FILE"
echo "# Generated on: $(date)" >> "$ENV_CONF_FILE"
echo "DISPLAY=$CAPTURED_DISPLAY" >> "$ENV_CONF_FILE"
echo "DBUS_SESSION_BUS_ADDRESS=$CAPTURED_DBUS_SESSION_BUS_ADDRESS" >> "$ENV_CONF_FILE"
echo "XDG_RUNTIME_DIR=$CAPTURED_XDG_RUNTIME_DIR" >> "$ENV_CONF_FILE"
echo "XAUTHORITY=$CAPTURED_XAUTHORITY" >> "$ENV_CONF_FILE"
echo "HOME=$CAPTURED_HOME" >> "$ENV_CONF_FILE"
echo "USER=$CAPTURED_USER" >> "$ENV_CONF_FILE"
echo "LOGNAME=$CAPTURED_LOGNAME" >> "$ENV_CONF_FILE"
echo "PATH=$CAPTURED_PATH" >> "$ENV_CONF_FILE" # Add PATH
echo "XDG_SESSION_ID=$CAPTURED_XDG_SESSION_ID" >> "$ENV_CONF_FILE"
echo "XDG_SESSION_TYPE=$CAPTURED_XDG_SESSION_TYPE" >> "$ENV_CONF_FILE"
echo "XDG_SESSION_CLASS=$CAPTURED_XDG_SESSION_CLASS" >> "$ENV_CONF_FILE"
echo "XDG_SEAT=$CAPTURED_XDG_SEAT" >> "$ENV_CONF_FILE"
echo "XDG_VTNR=$CAPTURED_XDG_VTNR" >> "$ENV_CONF_FILE"
echo "XDG_CURRENT_DESKTOP=$CAPTURED_XDG_CURRENT_DESKTOP" >> "$ENV_CONF_FILE"
echo "XDG_SESSION_PATH=$CAPTURED_XDG_SESSION_PATH" >> "$ENV_CONF_FILE" # NEW: Add XDG_SESSION_PATH
echo ""

# Set appropriate permissions for the environment file
# The SYSTEM_USER needs to be able to read this file
sudo chmod 640 "$ENV_CONF_FILE" # Read/write for owner, read for group, no access for others
sudo chown "$SYSTEM_USER":root "$ENV_CONF_FILE" # Owned by SYSTEM_USER, root group

echo "Graphical environment variables saved to $ENV_CONF_FILE"

# --- WARNING if SYSTEM_USER is different from current user ---
if [ "$SYSTEM_USER" != "$CAPTURED_USER" ]; then
    echo ""
    echo "********************************************************************************"
    echo "WARNING: You specified the service user as '$SYSTEM_USER', but this script"
    echo "was run by user '$CAPTURED_USER' in the graphical session."
    echo "Graphical/multimedia commands (play/pause, volume, screen lock) will LIKELY NOT WORK"
    echo "because '$SYSTEM_USER' may not have permissions to access '$CAPTURED_USER''s"
    echo "D-Bus session or X11 display. For these commands to function, '$SYSTEM_USER'"
    echo "should ideally be the same as your desktop user ('$CAPTURED_USER')."
    echo "********************************************************************************"
    echo ""
fi

# --- 4. Python environment setup ---
echo ""
echo "--- Setting up Python virtual environment ---"
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv "$VENV_DIR"
    echo "Virtual environment created in $VENV_DIR"
else
    echo "Virtual environment already exists in $VENV_DIR. Activating."
fi

source "$VENV_DIR/bin/activate"
echo "Virtual environment activated."

echo "Installing Python dependencies from $REQUIREMENTS_FILE..."
pip install -r "$REQUIREMENTS_FILE"
echo "Dependencies installed."

# Check if gunicorn is installed (it's required for the Systemd service)
if ! command -v "$GUNICORN_BIN" &> /dev/null; then
    echo "Gunicorn not found in the virtual environment. Installing..."
    pip install gunicorn
    echo "Gunicorn installed."
else
    echo "Gunicorn is already installed in the virtual environment."
fi

# --- 5. Sudoers Configuration (using /etc/sudoers.d/) ---
echo ""
echo "--- Configuring Sudoers permissions for SysPilot ---"
echo "This will allow the user '$SYSTEM_USER' to execute specific commands without a password."
echo "A file will be created at '$SUDOERS_D_TARGET_PATH'."

# Sudoers.d content. Ensure paths are correct for your system.
# Includes all commands that sys_actions/linux_actions.py attempts to execute.
SUDOERS_CONTENT=$(cat <<EOF
# This file is managed by the SysPilot setup script.
# It grants specific permissions to the '$SYSTEM_USER' user for system control actions.
# DO NOT EDIT THIS FILE MANUALLY UNLESS YOU KNOW WHAT YOU ARE DOING.

$SYSTEM_USER ALL=NOPASSWD: \\
    /usr/bin/systemctl poweroff, \\
    /usr/bin/systemctl reboot, \\
    /usr/bin/gnome-screensaver-command, \\
    /usr/bin/loginctl, \\
    /usr/bin/playerctl, \\
    /usr/bin/pactl, \\
    /usr/bin/amixer, \\
    /usr/bin/grep, \\
    /usr/bin/awk, \\
    /usr/bin/free, \\
    /usr/bin/uptime
EOF
)

TEMP_SUDOERS_FILE=$(mktemp) # Create a secure temporary file
echo "$SUDOERS_CONTENT" > "$TEMP_SUDOERS_FILE"

echo "Verifying syntax of the temporary sudoers file..."
if sudo visudo -c -f "$TEMP_SUDOERS_FILE"; then
    echo "Sudoers syntax verified successfully."
    
    # Create the /etc/sudoers.d directory if it doesn't exist
    if [ ! -d "$SUDOERS_D_PATH" ]; then
        echo "Creating directory: $SUDOERS_D_PATH"
        sudo mkdir -p "$SUDOERS_D_PATH"
        sudo chmod 0755 "$SUDOERS_D_PATH"
    fi

    echo "Copying the sudoers snippet to $SUDOERS_D_TARGET_PATH..."
    sudo cp "$TEMP_SUDOERS_FILE" "$SUDOERS_D_TARGET_PATH"
    sudo chmod 0440 "$SUDOERS_D_TARGET_PATH" # Correct permissions for sudoers.d files
    sudo chown root:root "$SUDOERS_D_TARGET_PATH" # Ensure it's owned by root:root
    echo "Sudoers snippet deployed successfully."
else
    echo "Syntax error in the temporary sudoers file! Aborting sudoers setup."
    rm -f "$TEMP_SUDOERS_FILE"
    exit 1
fi
rm -f "$TEMP_SUDOERS_FILE" # Clean up the temporary file

# --- 6. Systemd Service Creation ---
echo ""
echo "--- Creating Systemd service for SysPilot ---"
echo "The service file will be created at '$SYSTEMD_SERVICE_FILE'."

# Dynamically build the Environment variables block
# Using printf -v to ensure actual newlines are included in the string
ENV_VARS_BLOCK=""
if [ -n "$CAPTURED_DISPLAY" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"DISPLAY=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_DISPLAY"
fi
if [ -n "$CAPTURED_DBUS_SESSION_BUS_ADDRESS" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"DBUS_SESSION_BUS_ADDRESS=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_DBUS_SESSION_BUS_ADDRESS"
fi
if [ -n "$CAPTURED_XDG_RUNTIME_DIR" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_RUNTIME_DIR=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_RUNTIME_DIR"
fi
if [ -n "$CAPTURED_XAUTHORITY" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XAUTHORITY=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XAUTHORITY"
fi
if [ -n "$CAPTURED_HOME" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"HOME=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_HOME"
fi
if [ -n "$CAPTURED_USER" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"USER=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_USER"
fi
if [ -n "$CAPTURED_LOGNAME" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"LOGNAME=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_LOGNAME"
fi
if [ -n "$CAPTURED_PATH" ]; then # Add PATH
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"PATH=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_PATH"
fi
if [ -n "$CAPTURED_XDG_SESSION_ID" ]; then # Add more XDG session context
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_SESSION_ID=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_SESSION_ID"
fi
if [ -n "$CAPTURED_XDG_SESSION_TYPE" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_SESSION_TYPE=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_SESSION_TYPE"
fi
if [ -n "$CAPTURED_XDG_SESSION_CLASS" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_SESSION_CLASS=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_SESSION_CLASS"
fi
if [ -n "$CAPTURED_XDG_SEAT" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_SEAT=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_SEAT"
fi
if [ -n "$CAPTURED_XDG_VTNR" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_VTNR=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_VTNR"
fi
if [ -n "$CAPTURED_XDG_CURRENT_DESKTOP" ]; then
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_CURRENT_DESKTOP=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_CURRENT_DESKTOP"
fi
if [ -n "$CAPTURED_XDG_SESSION_PATH" ]; then # NEW: Add XDG_SESSION_PATH
    printf -v ENV_VARS_BLOCK "%sEnvironment=\"XDG_SESSION_PATH=%s\"\n" "$ENV_VARS_BLOCK" "$CAPTURED_XDG_SESSION_PATH"
fi


SERVICE_CONTENT=$(cat <<EOF
[Unit]
Description=SysPilot Flask Application
After=network.target

[Service]
User=$SYSTEM_USER
WorkingDirectory=$BACKEND_DIR
${ENV_VARS_BLOCK}ExecStart=$GUNICORN_BIN -w 4 app:app -b 0.0.0.0:5000
Restart=on-failure
StandardOutput=journal
StandardError=journal
SyslogIdentifier=syspilot-flask

[Install]
WantedBy=multi-user.target
EOF
)

echo "$SERVICE_CONTENT" | sudo tee "$SYSTEMD_SERVICE_FILE" > /dev/null
echo "Systemd service file created."

echo "Reloading Systemd daemon..."
sudo systemctl daemon-reload
echo "Enabling SysPilot service to start on boot..."
sudo systemctl enable "$SYSTEMD_SERVICE_NAME"
echo "Starting SysPilot service..."
sudo systemctl start "$SYSTEMD_SERVICE_NAME"

echo ""
echo "--- SysPilot setup completed successfully ---"
echo "You can check the service status with:"
echo "  sudo systemctl status $SYSTEMD_SERVICE_NAME"
echo "To view service logs:"
echo "  journalctl -u $SYSTEMD_SERVICE_NAME -f"
echo ""
echo "IMPORTANT: For graphical/multimedia commands to work, ensure the '$SYSTEM_USER' has access to the graphical session (user logged in to X11/Wayland)."
echo "If you continue to see 'Connection refused' or 'D-Bus' errors for multimedia, consider:"
echo "1. Ensuring the SYSTEM_USER is the same as the desktop user (e.g., 'aleph')."
echo "2. Adding the SYSTEM_USER to the 'pulse-access' and 'audio' groups: sudo usermod -aG pulse-access,audio $SYSTEM_USER"
echo "   (Then, you must log out and log back in, or reboot, for group changes to take full effect)."
echo "3. Restarting the SysPilot service after any user/group changes."
echo ""
echo "Ensure the 'syspilot.db' database is initialized. If it's the first time, the Flask server will create it."
echo "The application should now be accessible at http://0.0.0.0:5000/ or http://localhost:5000/"
echo "If this is a remote server, make sure your firewall allows port 5000."

